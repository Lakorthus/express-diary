✅TODO: Start the project with a README.md file
✅TODO: Add a .gitignore file
✅TODO: Add a .env file
✅TODO: Npm init
✅TODO: Npm download dependencies (express, dotenv, nodemon, morgan)
✅TODO: Create a app.js file where the server is going to be
✅TODO: Routing with express on app.js
✅TODO: Install [EJS](https://ejs.co/) as a view engine on app.js

 - EjS is a simple templating language that lets you generate HTML markup with plain JavaScript.
 - It's fast, simple, and works on server or client
 
✅TODO: Create a views folder with a home.ejs file
✅TODO: Create a set engine on app.js
✅TODO: Create Template engine for Home page and About page

 - <%= %> is used to print the value of a variable => res.render("home",{value: "Express Diary"});
 - <%- %> is used to print the unescaped value of a variable
 - <% %> is used to execute a JavaScript statement
 - <%_ %> is used to execute a JavaScript statement without a trailing newline
 - <%% %> is used to output a literal '<%'
 - <%# %> is used to output a comment
 - <%#- %> is used to output a comment without a trailing newline
 - <%#_ %> is used to output a comment without leading whitespace
 - <%#=- %> is used to output a comment without leading whitespace or a trailing newline
 - <%#_-%> is used to output a comment without leading or trailing whitespace
 - <%#=-%> is used to output a comment without a trailing newline
 - <%#_=-%> is used to output a comment without leading or trailing whitespace or a trailing newline
 - <%#-=-%> is used to output a comment without leading or trailing whitespace or a trailing newline

✅TODO: Serving static files
✅TODO: Create the Diary page
✅TODO: Securing inputs on the list
✅TODO: Body parser middleware
 - Documentation at npm body-parser google
✅TODO: MongoDB and Mongoose Atlas
 - Sign up for acc
 - Create data base
 - Database access
 - Network access
 - Add your current IP address
 - Create a new user
 - User as admin [important]
 - Connect your application
 - Copy the connection string
 - Paste the connection string in the .env file
 - Install mongoose
✅TODO: Creating the Schema
✅TODO: Adding a diary entry to the database
 - Remember ejs syntax for rendering the form
✅TODO: Reading the diary from the database
✅TODO: Updating the diary from the database
 - On the form only method required is POST and GET
 - To override this and be able to use PUt/PATCH and DELETE we need to use a package called method-override 
 - [https://stackoverflow.com/questions/28459418/use-of-put-vs-patch-methods-in-rest-api-real-life-scenarios]
 - https://www.npmjs.com/package/method-override
 - https://www.npmjs.com/package/express-method-override
✅TODO: Deleting the diary from the database

FIXME: Date format with moongose
FIXME: Design the diary page with bootstrap or tailwind
FIXME: CJS modules to ESM modules
FIXME: About page needs to contain information about the project
FIXME: Add a favicon

TODO: Deploy the project to Heroku, Netlify or Vercel
TODO: Add footer to the project
TODO: Twitter share button on the diary page
TODO: Implement jest for testing





